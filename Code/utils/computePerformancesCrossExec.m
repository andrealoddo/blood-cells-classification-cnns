function computePerformancesCrossExec( datasets, datasetsname, training_splits, ...
    splits, labelsPath, perfPath, featsPath, classifPath, modelsPath, ...,
    descriptors_sets, prepro, featselector, selection, graylevel, classifier, postpro, computeCNNFeaturesTrained )

    for dt = 1:numel(datasets)
        
        timeDestination = fullfile(perfPath, ...
            strcat( 'timeExtraction___', 'timeClassificationCross___',...
            datasetsname{dt}, '.mat') );      
        
        timeClassification = setOrLoadFile( timeDestination, 'timeClassification' );
        
        for sourcesp = 1:numel(training_splits)     % source splits
            for targetsp = 1:numel(splits{dt})      % target splits

                [testLabels, stringSplit, idx, trainSplit] = loadLabels( datasetsname{dt}, labelsPath, splits{dt}, targetsp, sourcesp);               
                for dsc_set = 1:numel(descriptors_sets)
                    descriptors = strsplit(descriptors_sets{dsc_set},'-');
                    
                    for gl = 1:numel(graylevel)
                        for pp = 1:numel(prepro)
                            
                            %Take test features                          
                            DBTest  = [];
                            for dsc = 1:numel(descriptors)
                                [DBTest_one, ~] = getFeatures( datasetsname{dt}, featsPath, ...
                                    training_splits{dt}{sourcesp}, splits{dt}, descriptors{dsc}, graylevel(gl), ...
                                    prepro{pp}, trainSplit, computeCNNFeaturesTrained, sp ); 
                                DBTest = [DBTest DBTest_one];
                            end
                            
                            
                            % [A] implementare la feature selection
                            for fs = 1:numel(featselector)
                                for sel = 1:numel(selection)
                                    if selection(sel) < 100 && size(DBTest,2) > 10
                                        selected_all = [];
                                        for dsc = 1:numel(descriptors)
                                            
                                            if( contains( descriptors{dsc}, 'FT' ) && computeCNNFeaturesTrained == 1 ) % fine-tuned CNN features
                                                trainSplitString = [training_splits{dt}{sourcesp}, '___'] ;
                                            else% standard CNN features or HC features
                                                trainSplitString = [];
                                            end
                                            featSelDestination = fullfile(featsPath, ...
                                                strcat( datasetsname{dt}, '___',...
                                                trainSplitString,...
                                                splits{dt}{targetsp}, '___',...
                                                descriptors{dsc}, '___',...
                                                num2str(graylevel(gl)), '___',...
                                                prepro{pp}, '___',...
                                                featselector{fs}, '___',...
                                                num2str(selection),...
                                                '.mat' ) );

                                            load(featSelDestination, 'selected');
                                            selected_all = [selected_all selected];
                                        end
                                        string_selection = [featselector{fs} '___' num2str(selection(sel)) '___'];                                        
                                    else
                                        selected_all = [];
                                        string_selection = '';
                                    end
                                    
                                    for cla = 1:numel(classifier)
                                        for pop = 1:numel(postpro)
                                            
                                            destinationResult = fullfile(classifPath, ...
                                                strcat('Cross___',...
                                                datasetsname{dt}, '___',...
                                                stringSplit,...
                                                descriptors_sets{dsc_set}, '___',...
                                                string_selection,...
                                                num2str(graylevel(gl)), '___',...
                                                prepro{pp}, '___',...
                                                postpro{pop}, '___',...
                                                classifier{cla}, '.mat'));
                                            
                                            if isfile( destinationResult ) == 0
                                                fprintf('CLASSIFICATION: %s %s %s %s %s %s %s\n',...
                                                    datasetsname{dt}, descriptors_sets{dsc_set},...
                                                    string_selection, num2str(graylevel(gl)),...
                                                    prepro{pp}, postpro{pop},  classifier{cla});
                                                
                                                destinationModel = fullfile(modelsPath,...
                                                    strcat(datasetsname{dt}, '___',...
                                                    splits{dt}{sourcesp}, '___',...
                                                    descriptors_sets{dsc_set}, '___',...
                                                    string_selection,...
                                                    num2str(graylevel(gl)), '___',...
                                                    prepro{pp}, '___',...
                                                    postpro{pop}, '___',...
                                                    classifier{cla}, '.mat'));
                                                
                                                if isfile(destinationModel) ~= 0
                                                    load(destinationModel, 'model');
                                                    
                                                    tic;
                                                    if selected_all
                                                        [~,wAVG] = Classification([], [], DBTest(idx{2},selected_all), testLabels(idx{2}), classifier, model);
                                                    else
                                                        [~,wAVG] = Classification([], [], DBTest(idx{2},:), testLabels(idx{2}), classifier, model);
                                                    end
                                                    
                                                    timeClassification.([erase( descriptors_sets{dsc_set}, '-' )  '___',...
                                                    string_selection,...
                                                    num2str(graylevel(gl)) '___',...
                                                    prepro{pp} '___',...
                                                    postpro{pop} '___',...
                                                    classifier{cla}]) = toc;
                                                    
                                                    results = struct('ACC', wAVG(1), 'P', wAVG(2), 'R', wAVG(3), 'TNR', wAVG(4), 'F1', wAVG(5));
                                                    save(destinationResult, 'results');
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end