function computePerformancesExec( datasets, datasetsname, training_splits, ...
    splits, labelsPath, perfPath, featsPath, classifPath, modelsPath, ...,
    descriptors_sets, prepro, featselector, selection, graylevel, classifier, postpro, computeCNNFeaturesTrained )

    for dt = 1:numel(datasets)

        timeDestination = fullfile(perfPath, ...
            strcat( 'timeExtraction___', 'timeClassification___',...
            datasetsname{dt}, '.mat') );

        timeClassification = setOrLoadFile( timeDestination, 'timeClassification' );

        for fosp = 1:numel(training_splits) % training split
            for sp = 1:numel(splits{dt}) % all splits

                [trainLabels, testLabels, trainSplit, string_split, idx] = loadLabels( datasetsname{dt}, labelsPath, splits{dt}, sp );

                for dsc_set = 1:numel(descriptors_sets)
                    descriptors = strsplit(descriptors_sets{dsc_set},'-');

                    for gl = 1:numel(graylevel)
                        for pp = 1:numel(prepro)

                            % Take train features
                            for dsc = 1:numel(descriptors)
                                [DBTrain, DBTest] = getFeatures( datasetsname{dt}, featsPath, ...
                                    training_splits{fosp}, splits{dt}, descriptors{dsc}, graylevel(gl), ...
                                    prepro{pp}, trainSplit, computeCNNFeaturesTrained, sp); 
                            end

                            for fs = 1:numel(featselector)
                                for sel = 1:numel(selection)
                                    if selection(sel) < 100 && size(DBTrain, 2) > 10
                                        selected = featureSelection(featselector{fs}, DBTrain, trainLabels, selection(sel));
                                        string_selection = [featselector{fs} '___' num2str(selection(sel)) '___'];
                                    else
                                        selected = [];
                                        string_selection = '';
                                    end

                                    for cla = 1:numel(classifier)
                                        for pop = 1:numel(postpro)
                                            destinationResult = fullfile(classifPath, ...
                                                strcat(datasetsname{dt}, '___',...
                                                    string_split, ...
                                                    descriptors_sets{dsc_set}, '___', ...
                                                    string_selection, ...
                                                    num2str(graylevel(gl)), '___', ...
                                                    prepro{pp}, '___', ...
                                                    postpro{pop}, '___', ...
                                                    classifier{cla}, '.mat') );

                                            if isfile( destinationResult ) == 0
                                                fprintf('CLASSIFICATION: %s %s %s %s %s %s %s\n',...
                                                    datasetsname{dt}, descriptors_sets{dsc_set}, ...
                                                    string_selection, num2str(graylevel(gl)), ...
                                                    prepro{pp}, postpro{pop}, classifier{cla});

                                                destinationModel = fullfile(modelsPath, ...
                                                strcat(datasetsname{dt}, '___',...
                                                    string_split, ...
                                                    descriptors_sets{dsc_set}, '___', ...
                                                    string_selection, ...
                                                    num2str(graylevel(gl)), '___', ...
                                                    prepro{pp}, '___', ...
                                                    postpro{pop}, '___', ...
                                                    classifier{cla}, '.mat') );

                                                tic;
                                                [model,wAVG] = EvaluateCrossClassification(DBTrain, ...
                                                    trainLabels, DBTest, testLabels, ...
                                                    postpro{pop}, selected, classifier{cla}, idx);

                                                timeClassification.([erase( descriptors_sets{dsc_set}, '-' )  '___',...
                                                    string_selection,...
                                                    num2str(graylevel(gl)) '___',...
                                                    prepro{pp} '___',...
                                                    postpro{pop} '___',...
                                                    classifier{cla}]) = toc;

                                                results = struct('ACC', wAVG(1), 'P', wAVG(2), 'R', wAVG(3), 'TNR', wAVG(4), 'F1', wAVG(5));
                                                save(destinationResult, 'results');
                                                save(destinationModel, 'model');
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        save(timeDestination, 'timeClassification');
    end

end


